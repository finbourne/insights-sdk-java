/*
 * FINBOURNE Insights API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.insights.model;

import java.util.Objects;
import com.finbourne.insights.model.AuditData;
import com.finbourne.insights.model.AuditDataSummary;
import com.finbourne.insights.model.AuditProcess;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.insights.JSON;

/**
 * AuditProcessSummary
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuditProcessSummary {
  public static final String SERIALIZED_NAME_PROCESS = "process";
  @SerializedName(SERIALIZED_NAME_PROCESS)
  private AuditProcess process;

  public static final String SERIALIZED_NAME_LATEST_ENTRY = "latestEntry";
  @SerializedName(SERIALIZED_NAME_LATEST_ENTRY)
  private AuditData latestEntry;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private AuditDataSummary summary;

  public AuditProcessSummary() {
  }

  public AuditProcessSummary process(AuditProcess process) {
    
    this.process = process;
    return this;
  }

   /**
   * Get process
   * @return process
  **/
  @jakarta.annotation.Nullable
  public AuditProcess getProcess() {
    return process;
  }


  public void setProcess(AuditProcess process) {
    this.process = process;
  }


  public AuditProcessSummary latestEntry(AuditData latestEntry) {
    
    this.latestEntry = latestEntry;
    return this;
  }

   /**
   * Get latestEntry
   * @return latestEntry
  **/
  @jakarta.annotation.Nullable
  public AuditData getLatestEntry() {
    return latestEntry;
  }


  public void setLatestEntry(AuditData latestEntry) {
    this.latestEntry = latestEntry;
  }


  public AuditProcessSummary summary(AuditDataSummary summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @jakarta.annotation.Nullable
  public AuditDataSummary getSummary() {
    return summary;
  }


  public void setSummary(AuditDataSummary summary) {
    this.summary = summary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditProcessSummary auditProcessSummary = (AuditProcessSummary) o;
    return Objects.equals(this.process, auditProcessSummary.process) &&
        Objects.equals(this.latestEntry, auditProcessSummary.latestEntry) &&
        Objects.equals(this.summary, auditProcessSummary.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(process, latestEntry, summary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditProcessSummary {\n");
    sb.append("    process: ").append(toIndentedString(process)).append("\n");
    sb.append("    latestEntry: ").append(toIndentedString(latestEntry)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("process");
    openapiFields.add("latestEntry");
    openapiFields.add("summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuditProcessSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditProcessSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditProcessSummary is not found in the empty JSON string", AuditProcessSummary.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `process`
      if (jsonObj.get("process") != null && !jsonObj.get("process").isJsonNull()) {
        AuditProcess.validateJsonElement(jsonObj.get("process"));
      }
      // validate the optional field `latestEntry`
      if (jsonObj.get("latestEntry") != null && !jsonObj.get("latestEntry").isJsonNull()) {
        AuditData.validateJsonElement(jsonObj.get("latestEntry"));
      }
      // validate the optional field `summary`
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) {
        AuditDataSummary.validateJsonElement(jsonObj.get("summary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditProcessSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditProcessSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditProcessSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditProcessSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditProcessSummary>() {
           @Override
           public void write(JsonWriter out, AuditProcessSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditProcessSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuditProcessSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuditProcessSummary
  * @throws IOException if the JSON string is invalid with respect to AuditProcessSummary
  */
  public static AuditProcessSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditProcessSummary.class);
  }

 /**
  * Convert an instance of AuditProcessSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
