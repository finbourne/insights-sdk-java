/*
 * FINBOURNE Insights API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.insights.model;

import java.util.Objects;
import com.finbourne.insights.model.Link;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.insights.JSON;

/**
 * Holds logged information about a request performed on an API.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RequestLog {
  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private String verb;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_TYPE = "userType";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private String userType;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  private String outcome;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private java.math.BigDecimal duration;

  public static final String SERIALIZED_NAME_HTTP_STATUS_CODE = "httpStatusCode";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS_CODE)
  private Integer httpStatusCode;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_SDK_LANGUAGE = "sdkLanguage";
  @SerializedName(SERIALIZED_NAME_SDK_LANGUAGE)
  private String sdkLanguage;

  public static final String SERIALIZED_NAME_SDK_VERSION = "sdkVersion";
  @SerializedName(SERIALIZED_NAME_SDK_VERSION)
  private String sdkVersion;

  public static final String SERIALIZED_NAME_SOURCE_APPLICATION = "sourceApplication";
  @SerializedName(SERIALIZED_NAME_SOURCE_APPLICATION)
  private String sourceApplication;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private List<String> correlationId;

  public static final String SERIALIZED_NAME_IMPERSONATING_USER = "impersonatingUser";
  @SerializedName(SERIALIZED_NAME_IMPERSONATING_USER)
  private String impersonatingUser;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public RequestLog() {
  }

  public RequestLog timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp of the request.
   * @return timestamp
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public RequestLog application(String application) {
    
    this.application = application;
    return this;
  }

   /**
   * The name of the application that the request was made to.
   * @return application
  **/
  @jakarta.annotation.Nonnull
  public String getApplication() {
    return application;
  }


  public void setApplication(String application) {
    this.application = application;
  }


  public RequestLog id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The identifier of the request.
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RequestLog sessionId(String sessionId) {
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * The identifier of the session that the request was made in.
   * @return sessionId
  **/
  @jakarta.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public RequestLog verb(String verb) {
    
    this.verb = verb;
    return this;
  }

   /**
   * The HTTP verb of the request.
   * @return verb
  **/
  @jakarta.annotation.Nonnull
  public String getVerb() {
    return verb;
  }


  public void setVerb(String verb) {
    this.verb = verb;
  }


  public RequestLog url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL of the request.
   * @return url
  **/
  @jakarta.annotation.Nonnull
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public RequestLog domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * The domain of the request.
   * @return domain
  **/
  @jakarta.annotation.Nullable
  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public RequestLog user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * The user who made the request.
   * @return user
  **/
  @jakarta.annotation.Nonnull
  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public RequestLog userType(String userType) {
    
    this.userType = userType;
    return this;
  }

   /**
   * The type of the user who made the request.
   * @return userType
  **/
  @jakarta.annotation.Nullable
  public String getUserType() {
    return userType;
  }


  public void setUserType(String userType) {
    this.userType = userType;
  }


  public RequestLog operation(String operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * The API operation invoked by the request.
   * @return operation
  **/
  @jakarta.annotation.Nullable
  public String getOperation() {
    return operation;
  }


  public void setOperation(String operation) {
    this.operation = operation;
  }


  public RequestLog outcome(String outcome) {
    
    this.outcome = outcome;
    return this;
  }

   /**
   * The outcome of the request: Completed, Errored or Failed.
   * @return outcome
  **/
  @jakarta.annotation.Nonnull
  public String getOutcome() {
    return outcome;
  }


  public void setOutcome(String outcome) {
    this.outcome = outcome;
  }


  public RequestLog duration(java.math.BigDecimal duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * The duration of the request in milliseconds.
   * @return duration
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getDuration() {
    return duration;
  }


  public void setDuration(java.math.BigDecimal duration) {
    this.duration = duration;
  }


  public RequestLog httpStatusCode(Integer httpStatusCode) {
    
    this.httpStatusCode = httpStatusCode;
    return this;
  }

   /**
   * The status code of the request.
   * @return httpStatusCode
  **/
  @jakarta.annotation.Nonnull
  public Integer getHttpStatusCode() {
    return httpStatusCode;
  }


  public void setHttpStatusCode(Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
  }


  public RequestLog errorCode(String errorCode) {
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Error code, if the request had a failure or error.
   * @return errorCode
  **/
  @jakarta.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }


  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public RequestLog sdkLanguage(String sdkLanguage) {
    
    this.sdkLanguage = sdkLanguage;
    return this;
  }

   /**
   * The language of the SDK used.
   * @return sdkLanguage
  **/
  @jakarta.annotation.Nullable
  public String getSdkLanguage() {
    return sdkLanguage;
  }


  public void setSdkLanguage(String sdkLanguage) {
    this.sdkLanguage = sdkLanguage;
  }


  public RequestLog sdkVersion(String sdkVersion) {
    
    this.sdkVersion = sdkVersion;
    return this;
  }

   /**
   * The version of the SDK used.
   * @return sdkVersion
  **/
  @jakarta.annotation.Nullable
  public String getSdkVersion() {
    return sdkVersion;
  }


  public void setSdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
  }


  public RequestLog sourceApplication(String sourceApplication) {
    
    this.sourceApplication = sourceApplication;
    return this;
  }

   /**
   * The name of the application that made the request.
   * @return sourceApplication
  **/
  @jakarta.annotation.Nullable
  public String getSourceApplication() {
    return sourceApplication;
  }


  public void setSourceApplication(String sourceApplication) {
    this.sourceApplication = sourceApplication;
  }


  public RequestLog correlationId(List<String> correlationId) {
    
    this.correlationId = correlationId;
    return this;
  }

  public RequestLog addCorrelationIdItem(String correlationIdItem) {
    if (this.correlationId == null) {
      this.correlationId = new ArrayList<>();
    }
    this.correlationId.add(correlationIdItem);
    return this;
  }

   /**
   * The chain of requestIds preceding this request
   * @return correlationId
  **/
  @jakarta.annotation.Nullable
  public List<String> getCorrelationId() {
    return correlationId;
  }


  public void setCorrelationId(List<String> correlationId) {
    this.correlationId = correlationId;
  }


  public RequestLog impersonatingUser(String impersonatingUser) {
    
    this.impersonatingUser = impersonatingUser;
    return this;
  }

   /**
   * The impersonating user. Only present if the request is an impersonated one
   * @return impersonatingUser
  **/
  @jakarta.annotation.Nullable
  public String getImpersonatingUser() {
    return impersonatingUser;
  }


  public void setImpersonatingUser(String impersonatingUser) {
    this.impersonatingUser = impersonatingUser;
  }


  public RequestLog links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public RequestLog addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestLog requestLog = (RequestLog) o;
    return Objects.equals(this.timestamp, requestLog.timestamp) &&
        Objects.equals(this.application, requestLog.application) &&
        Objects.equals(this.id, requestLog.id) &&
        Objects.equals(this.sessionId, requestLog.sessionId) &&
        Objects.equals(this.verb, requestLog.verb) &&
        Objects.equals(this.url, requestLog.url) &&
        Objects.equals(this.domain, requestLog.domain) &&
        Objects.equals(this.user, requestLog.user) &&
        Objects.equals(this.userType, requestLog.userType) &&
        Objects.equals(this.operation, requestLog.operation) &&
        Objects.equals(this.outcome, requestLog.outcome) &&
        (this.duration.compareTo(requestLog.getDuration()) == 0) &&
        Objects.equals(this.httpStatusCode, requestLog.httpStatusCode) &&
        Objects.equals(this.errorCode, requestLog.errorCode) &&
        Objects.equals(this.sdkLanguage, requestLog.sdkLanguage) &&
        Objects.equals(this.sdkVersion, requestLog.sdkVersion) &&
        Objects.equals(this.sourceApplication, requestLog.sourceApplication) &&
        Objects.equals(this.correlationId, requestLog.correlationId) &&
        Objects.equals(this.impersonatingUser, requestLog.impersonatingUser) &&
        Objects.equals(this.links, requestLog.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, application, id, sessionId, verb, url, domain, user, userType, operation, outcome, duration, httpStatusCode, errorCode, sdkLanguage, sdkVersion, sourceApplication, correlationId, impersonatingUser, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestLog {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    httpStatusCode: ").append(toIndentedString(httpStatusCode)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    sdkLanguage: ").append(toIndentedString(sdkLanguage)).append("\n");
    sb.append("    sdkVersion: ").append(toIndentedString(sdkVersion)).append("\n");
    sb.append("    sourceApplication: ").append(toIndentedString(sourceApplication)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    impersonatingUser: ").append(toIndentedString(impersonatingUser)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timestamp");
    openapiFields.add("application");
    openapiFields.add("id");
    openapiFields.add("sessionId");
    openapiFields.add("verb");
    openapiFields.add("url");
    openapiFields.add("domain");
    openapiFields.add("user");
    openapiFields.add("userType");
    openapiFields.add("operation");
    openapiFields.add("outcome");
    openapiFields.add("duration");
    openapiFields.add("httpStatusCode");
    openapiFields.add("errorCode");
    openapiFields.add("sdkLanguage");
    openapiFields.add("sdkVersion");
    openapiFields.add("sourceApplication");
    openapiFields.add("correlationId");
    openapiFields.add("impersonatingUser");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("application");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("verb");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("outcome");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("httpStatusCode");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RequestLog
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestLog is not found in the empty JSON string", RequestLog.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestLog.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if (!jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("userType") != null && !jsonObj.get("userType").isJsonNull()) && !jsonObj.get("userType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userType").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if (!jsonObj.get("outcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outcome").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("sdkLanguage") != null && !jsonObj.get("sdkLanguage").isJsonNull()) && !jsonObj.get("sdkLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkLanguage").toString()));
      }
      if ((jsonObj.get("sdkVersion") != null && !jsonObj.get("sdkVersion").isJsonNull()) && !jsonObj.get("sdkVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkVersion").toString()));
      }
      if ((jsonObj.get("sourceApplication") != null && !jsonObj.get("sourceApplication").isJsonNull()) && !jsonObj.get("sourceApplication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceApplication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceApplication").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull() && !jsonObj.get("correlationId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be an array in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if ((jsonObj.get("impersonatingUser") != null && !jsonObj.get("impersonatingUser").isJsonNull()) && !jsonObj.get("impersonatingUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impersonatingUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impersonatingUser").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestLog.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestLog>() {
           @Override
           public void write(JsonWriter out, RequestLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequestLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequestLog
  * @throws IOException if the JSON string is invalid with respect to RequestLog
  */
  public static RequestLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestLog.class);
  }

 /**
  * Convert an instance of RequestLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
