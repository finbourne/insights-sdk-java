/*
 * FINBOURNE Insights API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.insights.model;

import java.util.Objects;
import com.finbourne.insights.model.Link;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.insights.JSON;

/**
 * Holds information about a trace event.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TraceEventLog {
  public static final String SERIALIZED_NAME_TRACE_EVENT_ID = "traceEventId";
  @SerializedName(SERIALIZED_NAME_TRACE_EVENT_ID)
  private String traceEventId;

  public static final String SERIALIZED_NAME_TRACE_ID = "traceId";
  @SerializedName(SERIALIZED_NAME_TRACE_ID)
  private String traceId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_CIRCUIT_ID = "circuitId";
  @SerializedName(SERIALIZED_NAME_CIRCUIT_ID)
  private String circuitId;

  public static final String SERIALIZED_NAME_CIRCUIT_VERSION = "circuitVersion";
  @SerializedName(SERIALIZED_NAME_CIRCUIT_VERSION)
  private String circuitVersion;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public TraceEventLog() {
  }

  public TraceEventLog traceEventId(String traceEventId) {
    
    this.traceEventId = traceEventId;
    return this;
  }

   /**
   * The identifier of the trace event.
   * @return traceEventId
  **/
  @jakarta.annotation.Nonnull
  public String getTraceEventId() {
    return traceEventId;
  }


  public void setTraceEventId(String traceEventId) {
    this.traceEventId = traceEventId;
  }


  public TraceEventLog traceId(String traceId) {
    
    this.traceId = traceId;
    return this;
  }

   /**
   * The identifier of the parent trace.
   * @return traceId
  **/
  @jakarta.annotation.Nonnull
  public String getTraceId() {
    return traceId;
  }


  public void setTraceId(String traceId) {
    this.traceId = traceId;
  }


  public TraceEventLog createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The datetime at which the trace event was created.
   * @return createdAt
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TraceEventLog eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of the trace event.
   * @return eventType
  **/
  @jakarta.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public TraceEventLog content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * The content of the trace event.
   * @return content
  **/
  @jakarta.annotation.Nonnull
  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public TraceEventLog sessionId(String sessionId) {
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * The session ID of the trace event.
   * @return sessionId
  **/
  @jakarta.annotation.Nonnull
  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public TraceEventLog circuitId(String circuitId) {
    
    this.circuitId = circuitId;
    return this;
  }

   /**
   * The ID of the circuit in which the trace event occurred.
   * @return circuitId
  **/
  @jakarta.annotation.Nonnull
  public String getCircuitId() {
    return circuitId;
  }


  public void setCircuitId(String circuitId) {
    this.circuitId = circuitId;
  }


  public TraceEventLog circuitVersion(String circuitVersion) {
    
    this.circuitVersion = circuitVersion;
    return this;
  }

   /**
   * The version of the circuit in which the trace event occurred.
   * @return circuitVersion
  **/
  @jakarta.annotation.Nonnull
  public String getCircuitVersion() {
    return circuitVersion;
  }


  public void setCircuitVersion(String circuitVersion) {
    this.circuitVersion = circuitVersion;
  }


  public TraceEventLog nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * The ID of the circuit&#39;s node at which the trace event occured.
   * @return nodeId
  **/
  @jakarta.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public TraceEventLog links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public TraceEventLog addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceEventLog traceEventLog = (TraceEventLog) o;
    return Objects.equals(this.traceEventId, traceEventLog.traceEventId) &&
        Objects.equals(this.traceId, traceEventLog.traceId) &&
        Objects.equals(this.createdAt, traceEventLog.createdAt) &&
        Objects.equals(this.eventType, traceEventLog.eventType) &&
        Objects.equals(this.content, traceEventLog.content) &&
        Objects.equals(this.sessionId, traceEventLog.sessionId) &&
        Objects.equals(this.circuitId, traceEventLog.circuitId) &&
        Objects.equals(this.circuitVersion, traceEventLog.circuitVersion) &&
        Objects.equals(this.nodeId, traceEventLog.nodeId) &&
        Objects.equals(this.links, traceEventLog.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(traceEventId, traceId, createdAt, eventType, content, sessionId, circuitId, circuitVersion, nodeId, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceEventLog {\n");
    sb.append("    traceEventId: ").append(toIndentedString(traceEventId)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    circuitId: ").append(toIndentedString(circuitId)).append("\n");
    sb.append("    circuitVersion: ").append(toIndentedString(circuitVersion)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("traceEventId");
    openapiFields.add("traceId");
    openapiFields.add("createdAt");
    openapiFields.add("eventType");
    openapiFields.add("content");
    openapiFields.add("sessionId");
    openapiFields.add("circuitId");
    openapiFields.add("circuitVersion");
    openapiFields.add("nodeId");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("traceEventId");
    openapiRequiredFields.add("traceId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("sessionId");
    openapiRequiredFields.add("circuitId");
    openapiRequiredFields.add("circuitVersion");
    openapiRequiredFields.add("nodeId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TraceEventLog
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TraceEventLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TraceEventLog is not found in the empty JSON string", TraceEventLog.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TraceEventLog.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("traceEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceEventId").toString()));
      }
      if (!jsonObj.get("traceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceId").toString()));
      }
      if (!jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if (!jsonObj.get("circuitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `circuitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("circuitId").toString()));
      }
      if (!jsonObj.get("circuitVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `circuitVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("circuitVersion").toString()));
      }
      if (!jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TraceEventLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TraceEventLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TraceEventLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TraceEventLog.class));

       return (TypeAdapter<T>) new TypeAdapter<TraceEventLog>() {
           @Override
           public void write(JsonWriter out, TraceEventLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TraceEventLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TraceEventLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TraceEventLog
  * @throws IOException if the JSON string is invalid with respect to TraceEventLog
  */
  public static TraceEventLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TraceEventLog.class);
  }

 /**
  * Convert an instance of TraceEventLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
