/*
 * FINBOURNE Insights API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.insights.api;

import com.finbourne.insights.ApiCallback;
import com.finbourne.insights.ApiClient;
import com.finbourne.insights.ApiException;
import com.finbourne.insights.ApiResponse;
import com.finbourne.insights.Configuration;
import com.finbourne.insights.Pair;
import com.finbourne.insights.ProgressRequestBody;
import com.finbourne.insights.ProgressResponseBody;
import com.finbourne.insights.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.insights.model.LusidProblemDetails;
import com.finbourne.insights.model.LusidValidationProblemDetails;
import com.finbourne.insights.model.ResourceListOfTraceEventLog;
import com.finbourne.insights.model.ResourceListOfTraceLog;
import com.finbourne.insights.model.TraceLog;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CandelaTracesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CandelaTracesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CandelaTracesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getTraceLogCall(String traceId, String scope, final ApiCallback _callback) throws ApiException {
        return getTraceLogCall(traceId, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getTraceLogCall(String traceId, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/candelatraces/{scope}/{traceId}"
            .replace("{" + "traceId" + "}", localVarApiClient.escapeString(traceId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTraceLogValidateBeforeCall(String traceId, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'traceId' is set
        if (traceId == null) {
            throw new ApiException("Missing the required parameter 'traceId' when calling getTraceLog(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getTraceLog(Async)");
        }

        return getTraceLogCall(traceId, scope, _callback, opts);

    }


    private ApiResponse<TraceLog> getTraceLogWithHttpInfo(String traceId, String scope) throws ApiException {
        okhttp3.Call localVarCall = getTraceLogValidateBeforeCall(traceId, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TraceLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TraceLog> getTraceLogWithHttpInfo(String traceId, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getTraceLogValidateBeforeCall(traceId, scope, null, opts);
        Type localVarReturnType = new TypeToken<TraceLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTraceLogAsync(String traceId, String scope, final ApiCallback<TraceLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTraceLogValidateBeforeCall(traceId, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TraceLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTraceLogAsync(String traceId, String scope, final ApiCallback<TraceLog> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getTraceLogValidateBeforeCall(traceId, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<TraceLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTraceLogRequest {
        private final String traceId;
        private final String scope;

        private APIgetTraceLogRequest(String traceId, String scope) {
            this.traceId = traceId;
            this.scope = scope;
        }

        /**
         * Build call for getTraceLog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTraceLogCall(traceId, scope, _callback);
        }

        /**
         * Execute getTraceLog request
         * @return TraceLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TraceLog execute() throws ApiException {
            ApiResponse<TraceLog> localVarResp = getTraceLogWithHttpInfo(traceId, scope);
            return localVarResp.getData();
        }

        /**
         * Execute getTraceLog request. Use any specified configuration options to override any other configuration for this request only.
         * @return TraceLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TraceLog execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TraceLog> localVarResp = getTraceLogWithHttpInfo(traceId, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getTraceLog request with HTTP info returned
         * @return ApiResponse&lt;TraceLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TraceLog> executeWithHttpInfo() throws ApiException {
            return getTraceLogWithHttpInfo(traceId, scope);
        }

        /**
         * Execute getTraceLog request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TraceLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TraceLog> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getTraceLogWithHttpInfo(traceId, scope, opts);
        }

        /**
         * Execute getTraceLog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TraceLog> _callback) throws ApiException {
            return getTraceLogAsync(traceId, scope, _callback);
        }

        /**
         * Execute getTraceLog request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TraceLog> _callback, ConfigurationOptions opts) throws ApiException {
            return getTraceLogAsync(traceId, scope, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetTraceLog: Get the log for a specific trace.
     * 
     * @param traceId The identifier of the request to obtain the log for. (required)
     * @param scope  (required)
     * @return APIgetTraceLogRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTraceLogRequest getTraceLog(String traceId, String scope) {
        return new APIgetTraceLogRequest(traceId, scope);
    }
    private okhttp3.Call listTraceEventLogsCall(String traceId, String scope, String page, final ApiCallback _callback) throws ApiException {
        return listTraceEventLogsCall(traceId, scope, page,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listTraceEventLogsCall(String traceId, String scope, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/candelatraces/{scope}/{traceId}/events"
            .replace("{" + "traceId" + "}", localVarApiClient.escapeString(traceId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTraceEventLogsValidateBeforeCall(String traceId, String scope, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'traceId' is set
        if (traceId == null) {
            throw new ApiException("Missing the required parameter 'traceId' when calling listTraceEventLogs(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listTraceEventLogs(Async)");
        }

        return listTraceEventLogsCall(traceId, scope, page, _callback, opts);

    }


    private ApiResponse<ResourceListOfTraceEventLog> listTraceEventLogsWithHttpInfo(String traceId, String scope, String page) throws ApiException {
        okhttp3.Call localVarCall = listTraceEventLogsValidateBeforeCall(traceId, scope, page, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTraceEventLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfTraceEventLog> listTraceEventLogsWithHttpInfo(String traceId, String scope, String page, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listTraceEventLogsValidateBeforeCall(traceId, scope, page, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTraceEventLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTraceEventLogsAsync(String traceId, String scope, String page, final ApiCallback<ResourceListOfTraceEventLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTraceEventLogsValidateBeforeCall(traceId, scope, page, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTraceEventLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listTraceEventLogsAsync(String traceId, String scope, String page, final ApiCallback<ResourceListOfTraceEventLog> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listTraceEventLogsValidateBeforeCall(traceId, scope, page, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTraceEventLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTraceEventLogsRequest {
        private final String traceId;
        private final String scope;
        private String page;

        private APIlistTraceEventLogsRequest(String traceId, String scope) {
            this.traceId = traceId;
            this.scope = scope;
        }

        /**
         * Set page
         * @param page  (optional)
         * @return APIlistTraceEventLogsRequest
         */
        public APIlistTraceEventLogsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listTraceEventLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTraceEventLogsCall(traceId, scope, page, _callback);
        }

        /**
         * Execute listTraceEventLogs request
         * @return ResourceListOfTraceEventLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTraceEventLog execute() throws ApiException {
            ApiResponse<ResourceListOfTraceEventLog> localVarResp = listTraceEventLogsWithHttpInfo(traceId, scope, page);
            return localVarResp.getData();
        }

        /**
         * Execute listTraceEventLogs request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfTraceEventLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTraceEventLog execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfTraceEventLog> localVarResp = listTraceEventLogsWithHttpInfo(traceId, scope, page, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listTraceEventLogs request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfTraceEventLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTraceEventLog> executeWithHttpInfo() throws ApiException {
            return listTraceEventLogsWithHttpInfo(traceId, scope, page);
        }

        /**
         * Execute listTraceEventLogs request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfTraceEventLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTraceEventLog> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listTraceEventLogsWithHttpInfo(traceId, scope, page, opts);
        }

        /**
         * Execute listTraceEventLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTraceEventLog> _callback) throws ApiException {
            return listTraceEventLogsAsync(traceId, scope, page, _callback);
        }

        /**
         * Execute listTraceEventLogs request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTraceEventLog> _callback, ConfigurationOptions opts) throws ApiException {
            return listTraceEventLogsAsync(traceId, scope, page, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListTraceEventLogs: Get the trace event logs for a specific trace.
     * 
     * @param traceId The identifier of the request to obtain the log for. (required)
     * @param scope  (required)
     * @return APIlistTraceEventLogsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTraceEventLogsRequest listTraceEventLogs(String traceId, String scope) {
        return new APIlistTraceEventLogsRequest(traceId, scope);
    }
    private okhttp3.Call listTraceLogsCall(String filter, String sortBy, Integer limit, String page, final ApiCallback _callback) throws ApiException {
        return listTraceLogsCall(filter, sortBy, limit, page,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listTraceLogsCall(String filter, String sortBy, Integer limit, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/candelatraces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTraceLogsValidateBeforeCall(String filter, String sortBy, Integer limit, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listTraceLogsCall(filter, sortBy, limit, page, _callback, opts);

    }


    private ApiResponse<ResourceListOfTraceLog> listTraceLogsWithHttpInfo(String filter, String sortBy, Integer limit, String page) throws ApiException {
        okhttp3.Call localVarCall = listTraceLogsValidateBeforeCall(filter, sortBy, limit, page, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTraceLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfTraceLog> listTraceLogsWithHttpInfo(String filter, String sortBy, Integer limit, String page, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listTraceLogsValidateBeforeCall(filter, sortBy, limit, page, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTraceLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTraceLogsAsync(String filter, String sortBy, Integer limit, String page, final ApiCallback<ResourceListOfTraceLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTraceLogsValidateBeforeCall(filter, sortBy, limit, page, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTraceLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listTraceLogsAsync(String filter, String sortBy, Integer limit, String page, final ApiCallback<ResourceListOfTraceLog> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listTraceLogsValidateBeforeCall(filter, sortBy, limit, page, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTraceLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTraceLogsRequest {
        private String filter;
        private String sortBy;
        private Integer limit;
        private String page;

        private APIlistTraceLogsRequest() {
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about [ filtering results from LUSID](https://support.lusid.com/filtering-results-from-lusid). (optional)
         * @return APIlistTraceLogsRequest
         */
        public APIlistTraceLogsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName (optional)
         * @return APIlistTraceLogsRequest
         */
        public APIlistTraceLogsRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, only return this number of records. The minimum value is 0 and the maximum is 10000. (optional)
         * @return APIlistTraceLogsRequest
         */
        public APIlistTraceLogsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter and sortby fields should not be supplied. (optional)
         * @return APIlistTraceLogsRequest
         */
        public APIlistTraceLogsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listTraceLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTraceLogsCall(filter, sortBy, limit, page, _callback);
        }

        /**
         * Execute listTraceLogs request
         * @return ResourceListOfTraceLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTraceLog execute() throws ApiException {
            ApiResponse<ResourceListOfTraceLog> localVarResp = listTraceLogsWithHttpInfo(filter, sortBy, limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listTraceLogs request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfTraceLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTraceLog execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfTraceLog> localVarResp = listTraceLogsWithHttpInfo(filter, sortBy, limit, page, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listTraceLogs request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfTraceLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTraceLog> executeWithHttpInfo() throws ApiException {
            return listTraceLogsWithHttpInfo(filter, sortBy, limit, page);
        }

        /**
         * Execute listTraceLogs request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfTraceLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTraceLog> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listTraceLogsWithHttpInfo(filter, sortBy, limit, page, opts);
        }

        /**
         * Execute listTraceLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTraceLog> _callback) throws ApiException {
            return listTraceLogsAsync(filter, sortBy, limit, page, _callback);
        }

        /**
         * Execute listTraceLogs request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTraceLog> _callback, ConfigurationOptions opts) throws ApiException {
            return listTraceLogsAsync(filter, sortBy, limit, page, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListTraceLogs: Get the logs for traces.
     * 
     * @return APIlistTraceLogsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTraceLogsRequest listTraceLogs() {
        return new APIlistTraceLogsRequest();
    }
}
