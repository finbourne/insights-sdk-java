/*
 * FINBOURNE Insights API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.insights.api;

import com.finbourne.insights.ApiCallback;
import com.finbourne.insights.ApiClient;
import com.finbourne.insights.ApiException;
import com.finbourne.insights.ApiResponse;
import com.finbourne.insights.Configuration;
import com.finbourne.insights.Pair;
import com.finbourne.insights.ProgressRequestBody;
import com.finbourne.insights.ProgressResponseBody;
import com.finbourne.insights.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.insights.model.AuditEntry;
import com.finbourne.insights.model.CreateAuditEntry;
import com.finbourne.insights.model.LusidProblemDetails;
import com.finbourne.insights.model.LusidValidationProblemDetails;
import com.finbourne.insights.model.ProblemDetails;
import com.finbourne.insights.model.ResourceListOfAuditProcessSummary;
import com.finbourne.insights.model.ScrollableCollectionOfAuditEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEntryCall(CreateAuditEntry createAuditEntry, final ApiCallback _callback) throws ApiException {
        return createEntryCall(createAuditEntry,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createEntryCall(CreateAuditEntry createAuditEntry, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuditEntry;

        // create path and map variables
        String localVarPath = "/api/auditing/entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntryValidateBeforeCall(CreateAuditEntry createAuditEntry, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createEntryCall(createAuditEntry, _callback, opts);

    }


    private ApiResponse<AuditEntry> createEntryWithHttpInfo(CreateAuditEntry createAuditEntry) throws ApiException {
        okhttp3.Call localVarCall = createEntryValidateBeforeCall(createAuditEntry, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AuditEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AuditEntry> createEntryWithHttpInfo(CreateAuditEntry createAuditEntry, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createEntryValidateBeforeCall(createAuditEntry, null, opts);
        Type localVarReturnType = new TypeToken<AuditEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEntryAsync(CreateAuditEntry createAuditEntry, final ApiCallback<AuditEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEntryValidateBeforeCall(createAuditEntry, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AuditEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createEntryAsync(CreateAuditEntry createAuditEntry, final ApiCallback<AuditEntry> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createEntryValidateBeforeCall(createAuditEntry, _callback, opts);
        Type localVarReturnType = new TypeToken<AuditEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateEntryRequest {
        private CreateAuditEntry createAuditEntry;

        private APIcreateEntryRequest() {
        }

        /**
         * Set createAuditEntry
         * @param createAuditEntry Information about the entry to be created. (optional)
         * @return APIcreateEntryRequest
         */
        public APIcreateEntryRequest createAuditEntry(CreateAuditEntry createAuditEntry) {
            this.createAuditEntry = createAuditEntry;
            return this;
        }

        /**
         * Build call for createEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createEntryCall(createAuditEntry, _callback);
        }

        /**
         * Execute createEntry request
         * @return AuditEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AuditEntry execute() throws ApiException {
            ApiResponse<AuditEntry> localVarResp = createEntryWithHttpInfo(createAuditEntry);
            return localVarResp.getData();
        }

        /**
         * Execute createEntry request. Use any specified configuration options to override any other configuration for this request only.
         * @return AuditEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AuditEntry execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AuditEntry> localVarResp = createEntryWithHttpInfo(createAuditEntry, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createEntry request with HTTP info returned
         * @return ApiResponse&lt;AuditEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuditEntry> executeWithHttpInfo() throws ApiException {
            return createEntryWithHttpInfo(createAuditEntry);
        }

        /**
         * Execute createEntry request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AuditEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuditEntry> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createEntryWithHttpInfo(createAuditEntry, opts);
        }

        /**
         * Execute createEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuditEntry> _callback) throws ApiException {
            return createEntryAsync(createAuditEntry, _callback);
        }

        /**
         * Execute createEntry request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuditEntry> _callback, ConfigurationOptions opts) throws ApiException {
            return createEntryAsync(createAuditEntry, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CreateEntry: Create (persist) and audit entry..
     * 
     * @return APIcreateEntryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateEntryRequest createEntry() {
        return new APIcreateEntryRequest();
    }
    private okhttp3.Call getProcessesCall(final ApiCallback _callback) throws ApiException {
        return getProcessesCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getProcessesCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auditing/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessesValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return getProcessesCall(_callback, opts);

    }


    private ApiResponse<ResourceListOfAuditProcessSummary> getProcessesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProcessesValidateBeforeCall(null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfAuditProcessSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfAuditProcessSummary> getProcessesWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getProcessesValidateBeforeCall(null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfAuditProcessSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProcessesAsync(final ApiCallback<ResourceListOfAuditProcessSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessesValidateBeforeCall(_callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfAuditProcessSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getProcessesAsync(final ApiCallback<ResourceListOfAuditProcessSummary> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getProcessesValidateBeforeCall(_callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfAuditProcessSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetProcessesRequest {

        private APIgetProcessesRequest() {
        }

        /**
         * Build call for getProcesses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProcessesCall(_callback);
        }

        /**
         * Execute getProcesses request
         * @return ResourceListOfAuditProcessSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfAuditProcessSummary execute() throws ApiException {
            ApiResponse<ResourceListOfAuditProcessSummary> localVarResp = getProcessesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getProcesses request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfAuditProcessSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfAuditProcessSummary execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfAuditProcessSummary> localVarResp = getProcessesWithHttpInfo(opts);
            return localVarResp.getData();
        }

        /**
         * Execute getProcesses request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfAuditProcessSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfAuditProcessSummary> executeWithHttpInfo() throws ApiException {
            return getProcessesWithHttpInfo();
        }

        /**
         * Execute getProcesses request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfAuditProcessSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfAuditProcessSummary> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getProcessesWithHttpInfo(opts);
        }

        /**
         * Execute getProcesses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfAuditProcessSummary> _callback) throws ApiException {
            return getProcessesAsync(_callback);
        }

        /**
         * Execute getProcesses request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfAuditProcessSummary> _callback, ConfigurationOptions opts) throws ApiException {
            return getProcessesAsync(_callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetProcesses: Get the latest audit entry for each process.
     * This will never be &#x60;null&#x60;, though it may be empty.
     * @return APIgetProcessesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetProcessesRequest getProcesses() {
        return new APIgetProcessesRequest();
    }
    private okhttp3.Call listEntriesCall(String filter, String sortBy, Integer size, String state, final ApiCallback _callback) throws ApiException {
        return listEntriesCall(filter, sortBy, size, state,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listEntriesCall(String filter, String sortBy, Integer size, String state, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auditing/entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEntriesValidateBeforeCall(String filter, String sortBy, Integer size, String state, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listEntriesCall(filter, sortBy, size, state, _callback, opts);

    }


    private ApiResponse<ScrollableCollectionOfAuditEntry> listEntriesWithHttpInfo(String filter, String sortBy, Integer size, String state) throws ApiException {
        okhttp3.Call localVarCall = listEntriesValidateBeforeCall(filter, sortBy, size, state, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ScrollableCollectionOfAuditEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ScrollableCollectionOfAuditEntry> listEntriesWithHttpInfo(String filter, String sortBy, Integer size, String state, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listEntriesValidateBeforeCall(filter, sortBy, size, state, null, opts);
        Type localVarReturnType = new TypeToken<ScrollableCollectionOfAuditEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEntriesAsync(String filter, String sortBy, Integer size, String state, final ApiCallback<ScrollableCollectionOfAuditEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEntriesValidateBeforeCall(filter, sortBy, size, state, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ScrollableCollectionOfAuditEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listEntriesAsync(String filter, String sortBy, Integer size, String state, final ApiCallback<ScrollableCollectionOfAuditEntry> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listEntriesValidateBeforeCall(filter, sortBy, size, state, _callback, opts);
        Type localVarReturnType = new TypeToken<ScrollableCollectionOfAuditEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistEntriesRequest {
        private String filter;
        private String sortBy;
        private Integer size;
        private String state;

        private APIlistEntriesRequest() {
        }

        /**
         * Set filter
         * @param filter The filter to be applied to the results. (optional)
         * @return APIlistEntriesRequest
         */
        public APIlistEntriesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy The order to return the entries in. (optional)
         * @return APIlistEntriesRequest
         */
        public APIlistEntriesRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set size
         * @param size The maximum number of entries to return. (optional, default to 1000)
         * @return APIlistEntriesRequest
         */
        public APIlistEntriesRequest size(Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set state
         * @param state The scrolling state, used to iterate through the data set. (optional)
         * @return APIlistEntriesRequest
         */
        public APIlistEntriesRequest state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Build call for listEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEntriesCall(filter, sortBy, size, state, _callback);
        }

        /**
         * Execute listEntries request
         * @return ScrollableCollectionOfAuditEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ScrollableCollectionOfAuditEntry execute() throws ApiException {
            ApiResponse<ScrollableCollectionOfAuditEntry> localVarResp = listEntriesWithHttpInfo(filter, sortBy, size, state);
            return localVarResp.getData();
        }

        /**
         * Execute listEntries request. Use any specified configuration options to override any other configuration for this request only.
         * @return ScrollableCollectionOfAuditEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ScrollableCollectionOfAuditEntry execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ScrollableCollectionOfAuditEntry> localVarResp = listEntriesWithHttpInfo(filter, sortBy, size, state, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listEntries request with HTTP info returned
         * @return ApiResponse&lt;ScrollableCollectionOfAuditEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScrollableCollectionOfAuditEntry> executeWithHttpInfo() throws ApiException {
            return listEntriesWithHttpInfo(filter, sortBy, size, state);
        }

        /**
         * Execute listEntries request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ScrollableCollectionOfAuditEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScrollableCollectionOfAuditEntry> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listEntriesWithHttpInfo(filter, sortBy, size, state, opts);
        }

        /**
         * Execute listEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScrollableCollectionOfAuditEntry> _callback) throws ApiException {
            return listEntriesAsync(filter, sortBy, size, state, _callback);
        }

        /**
         * Execute listEntries request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScrollableCollectionOfAuditEntry> _callback, ConfigurationOptions opts) throws ApiException {
            return listEntriesAsync(filter, sortBy, size, state, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListEntries: Get the audit entries.
     * This will never be &#x60;null&#x60;, though it may be empty.
     * @return APIlistEntriesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistEntriesRequest listEntries() {
        return new APIlistEntriesRequest();
    }
}
